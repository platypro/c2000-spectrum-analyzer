var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Boot = xdc.useModule('ti.catalog.c2800.initF2837x.Boot');
var Startup = xdc.useModule('xdc.runtime.Startup');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x800;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

BIOS.libDir = "../lib"

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x100;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;
Boot.OSCCLKSRCSEL = Boot.OscClk_XTAL;
Boot.SPLLIMULT = 40;
BIOS.cpuFreq.lo = 200000000;
Boot.SYSCLKDIVSEL = 1;
Boot.disableWatchdog = true;
BIOS.rtsGateType = BIOS.GateMutex;
var timer1Params0 = new Timer.Params();
timer1Params0.instance.name = "timer1";
timer1Params0.periodType = xdc.module("ti.sysbios.interfaces.ITimer").PeriodType_COUNTS;
timer1Params0.period = 20000;
Program.global.timer1 = Timer.create(null, "&sample_adc", timer1Params0);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "hwi2";
Program.global.hwi2 = Hwi.create(2, "&sample_adc", hwi1Params);
var swi1Params = new Swi.Params();
swi1Params.instance.name = "Swi1";
swi1Params.priority = 13;
Program.global.Swi1 = Swi.create("&calc_fft", swi1Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "sem0";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.sem0 = Semaphore.create(null, semaphore0Params);
Semaphore.supportsEvents = false;
var swi1Params0 = new Swi.Params();
swi1Params0.instance.name = "Swi0";
swi1Params0.priority = 15;
Program.global.Swi0 = Swi.create("&load_buffer", swi1Params0);
